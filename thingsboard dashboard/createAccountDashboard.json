{
  "widget": {
    "typeFullFqn": "system.cards.markdown_card",
    "type": "latest",
    "sizeX": 5,
    "sizeY": 3.5,
    "config": {
      "datasources": [],
      "timewindow": {
        "displayValue": "",
        "selectedTab": 0,
        "realtime": {
          "realtimeType": 1,
          "interval": 1000,
          "timewindowMs": 60000,
          "quickInterval": "CURRENT_DAY"
        },
        "history": {
          "historyType": 0,
          "interval": 1000,
          "timewindowMs": 60000,
          "fixedTimewindow": {
            "startTimeMs": 1728335064019,
            "endTimeMs": 1728421464019
          },
          "quickInterval": "CURRENT_DAY"
        },
        "aggregation": {
          "type": "AVG",
          "limit": 25000
        }
      },
      "showTitle": false,
      "backgroundColor": "#fff",
      "color": "rgba(0, 0, 0, 0.87)",
      "padding": "0px",
      "settings": {
        "useMarkdownTextFunction": true,
        "markdownTextPattern": "### Markdown/HTML card\n - **Current entity**: ${entityName}.\n - **Current value**: ${Random}.",
        "markdownTextFunction": "\nconst countryCodes = [\n    '1', '7', '20', '27', '30', '31', '32', '81', '33', '34', '36', '39', '40', '41', '43', '44', '45', '46', '47', '48', '49', '52', '53', '54', '55', '56', '57', '58', '59', '61', '64', '351', '352', '353', '354', '355', '356', '358', '359', '372', '373', '375', '376', '377', '378', '380', '381', '385', '386', '387', '389', '420', '421', '423', '500', '501', '502', '503', '504', '505', '506', '507', '508', '509', '590', '591', '592', '593', '594', '595', '596', '597', '598', '599', '672', '674', '675', '676', '677', '678', '679', '680', '681', '682', '683', '685', '686', '687', '688', '689', '690', '691', '692'\n];\n\n\nfunction formatReadedPhoneNumber(phoneNumber) {\n    // Convert the input to a string in case it's a number\n    const phoneStr = phoneNumber.toString();\n\n    // Validate that the phone number has exactly 10 digits\n    if (!/^\\d{10}$/.test(phoneStr)) {\n        throw new Error('Phone number must be exactly 10 digits');\n    }\n\n    const areaCode = phoneStr.substring(0, 3);\n    const centralOfficeCode = phoneStr.substring(3, 6);\n    const lineNumber = phoneStr.substring(6, 10);\n\n    // Combine with hyphens\n    return `${areaCode}-${centralOfficeCode}-${lineNumber}`;\n}\n\n// Function to format the phone number input\nfunction formatPhoneNumber() {\n    var phoneNumberInside = document.getElementById(\n            'phone-number');\n    if (phoneNumberInside !== null) {\n\n        // Add the event listener once the input is found\n        phoneNumberInside.addEventListener('input', function(e) {\n            let input = e.target.value.replace(\n                /\\D/g, ''\n            ); // Remove non-numeric characters\n            let formattedNumber = '';\n\n            // Format the number based on its length\n            if (input.length > 0) {\n                formattedNumber = input.substring(0,\n                    3); // First 3 digits\n            }\n            if (input.length >= 4) {\n                formattedNumber += '-' + input\n                    .substring(3,\n                        6); // Next 3 digits\n            }\n            if (input.length >= 7) {\n                formattedNumber += '-' + input\n                    .substring(6,\n                        10); // Last 4 digits\n            }\n\n            e.target.value =\n                formattedNumber; // Update the input field with the formatted value\n        });\n    } else {\n        setTimeout(formatPhoneNumber,\n            1000); // Retry after 1 second if not found\n    }\n}\n\nfunction splitPhoneNumber(phoneNumber) {\n    if (typeof phoneNumber !== 'string') {\n        throw new Error('Phone number must be a string');\n    }\n\n    // Ensure the phone number starts with '+'\n    if (!phoneNumber.startsWith('+')) {\n        throw new Error('Phone number must start with \"+\"');\n    }\n\n    // Remove the '+' for processing\n    const numberWithoutPlus = phoneNumber.slice(1);\n\n    // Country codes can be 1 to 3 digits\n    for (let i = 3; i >= 1; i--) {\n        const potentialCode = numberWithoutPlus.slice(0, i);\n        if (countryCodes.includes(potentialCode)) {\n            const countryCode = `+${potentialCode}`;\n            const localNumber = numberWithoutPlus.slice(i);\n            \n            let parsedNumber;\n            if (localNumber.toString().length == 10){\n                parsedNumber = formatReadedPhoneNumber(localNumber)\n            } else {\n                parsedNumber = localNumber;\n            }\n\n            const countrySelect = document.getElementById('country-code');\n            if (countrySelect) {\n                countrySelect.value = countryCode;\n            }\n\n            // Optional: Validate local number length based on country code\n            // This requires additional data and is beyond the current scope\n\n            return {\n                countryCode,\n                phoneNumber: parsedNumber\n            };\n        }\n    }\n\n    throw new Error('Country code not found or invalid');\n}\n\n\n// Function to generate and return the HTML content\nfunction PopulateCurrentUserData() {\n    // Dynamically generate HTML strings\n\n    const html_first_name =\"First name\";\n    const html_last_name = \"Last name\";\n    let html_phone_number = \"XXX-XXX-XXXX\";\n    const html_email = \"your@gmaill.com\";\n    let html_country_code = \"+1\";\n    \n    document.getElementById('phone-number').setAttribute('placeholder', html_phone_number);\n    document.getElementById('contact-name').setAttribute('placeholder', html_first_name);\n    document.getElementById('contact-last-name').setAttribute('placeholder', html_last_name);\n    document.getElementById('email').setAttribute('placeholder', html_email);\n    \n}\n\n\n// Function to check for the next button and set event listeners\nfunction checkForCountryButton() {\n    const countryCodeButton = document.getElementById(\n        'country-code');\n\n    if (countryCodeButton !== null) {\n\n        countryCodeButton.addEventListener('change',\n            function() {\n                let selectedCode = this.value;\n            });\n\n    } else {\n        setTimeout(checkForCountryButton,\n            1000); // Retry after 1 second if not found\n    }\n}\n\n\nfunction handleFormSubmit() {\n    // Get NEW name values\n    const newName = document.getElementById('contact-name').value;\n    const newLastName = document.getElementById('contact-last-name').value;\n    const phoneCountryCode = document.getElementById('country-code').value;\n    let phoneNumber = document.getElementById('phone-number').value;\n    phoneNumber = phoneNumber.replace(/-/g, '');\n    \n    \n\n    const newMail = document.getElementById('email').value;\n\n\n    // Get PLACEHOLDER name values\n    const placholderName = document.getElementById('contact-name').placeholder;\n    const placholderLastName = document.getElementById('contact-last-name').placeholder;\n    const placeholderPhoneCountryCode = document.getElementById('country-code').placeholder;\n    const placeholderPhoneNumber = document.getElementById('phone-number').placeholder;\n    const placeholderMail = document.getElementById('email').placeholder;\n    \n     // Construct values to save\n    const ConstructedNewName = (newName ? newName : placholderName);\n    const ConstructedNewLastName = (newLastName ? newLastName : placholderLastName);\n    const ConstructedPhoneCountryCode = (phoneCountryCode ? phoneCountryCode : placeholderPhoneCountryCode);\n    const ConstructedPhoneNumber = (phoneNumber ? phoneNumber : placeholderPhoneNumber);\n    const ConstructedNewMail = (newMail ? newMail : placeholderMail);\n    //const ConstructedNewMail = placeholderMail;\n    \n\n    \n    // Build the new user data dictionary\n    dictNewData = {\n        name: ConstructedNewName,\n        lastName: ConstructedNewLastName,\n        mail: ConstructedNewMail,\n        country_code: ConstructedPhoneCountryCode,\n        number: ConstructedPhoneNumber \n    };\n\n    \n    // Return both dictionaries\n    return {dictNewData };\n\n    // You can now send these dictionaries to your backend for processing.\n}\n\n\nfunction validateForm() {\n    // Selecciona el formulario\n    var form = document.querySelector('.inputsContainer');\n\n    if (!form) {\n        console.error(\"Formulario no encontrado.\");\n        return false;\n    }\n\n    // Selecciona todos los campos input, select y textarea dentro del formulario\n    var inputs = form.querySelectorAll('input, select, textarea');\n\n\n    var isValid = true; // Variable para rastrear la validez del formulario\n\n    for (var i = 0; i < inputs.length; i++) {\n        var input = inputs[i];\n        var value = input.value.trim();\n        var errorMessageElement = form.querySelector(`#${input.id}-error`);\n\n        // Verifica si el campo es requerido\n        if (input.hasAttribute('required')) {\n\n            if (value === '') {\n                input.classList.add('invalid');\n                isValid = false;\n\n                if (errorMessageElement) {\n                    errorMessageElement.textContent = 'Este campo es obligatorio.';\n                    errorMessageElement.classList.add('active');\n                }\n            } else {\n                input.classList.remove('invalid');\n\n                if (errorMessageElement) {\n                    errorMessageElement.textContent = '';\n                    errorMessageElement.classList.remove('active');\n                }\n            }\n        }\n\n        // Validación específica para el campo de número de teléfono\n        if (input.id === 'phone-number') {\n            // Elimina todos los caracteres que no sean dígitos\n            var digits = value.replace(/\\D/g, '');\n\n            if (digits.length !== 10) {\n                input.classList.add('invalid');\n                isValid = false;\n\n                if (errorMessageElement) {\n                    errorMessageElement.textContent = 'El número de teléfono debe tener exactamente 10 dígitos.';\n                    errorMessageElement.classList.add('active');\n                }\n            } else {\n                input.classList.remove('invalid');\n\n                if (errorMessageElement) {\n                    errorMessageElement.textContent = '';\n                    errorMessageElement.classList.remove('active');\n                }\n            }\n        }\n\n        // Validación específica para el campo de correo electrónico\n        if (input.id === 'email') {\n            // Expresión regular para validar el formato del correo electrónico\n            var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n            if (!emailRegex.test(value)) {\n                input.classList.add('invalid');\n                isValid = false;\n\n                \n            } else {\n                input.classList.remove('invalid');\n\n                if (errorMessageElement) {\n                    errorMessageElement.textContent = '';\n                    errorMessageElement.classList.remove('active');\n                }\n            }\n        }\n    }\n\n    if (!isValid) {\n        // Opcional: Enfoca el primer campo inválido\n        var firstInvalid = form.querySelector('.invalid');\n        if (firstInvalid) {\n            firstInvalid.focus();\n        }\n\n        return false; // La validación falla\n    }\n\n    return true; // La validación es exitosa\n}\n\n\n\n// Function to check for the next button and set event listeners\nfunction checkForfinishButton() {\n    var submitButton = document.getElementById(\n        'Save-button');\n\n    if (submitButton !== null) {\n        // Example: Call the update function when the user submits the new phone number\n        formatPhoneNumber();\n        \n        //PopulateCurrentUserData();\n        submitButton.addEventListener('click', function(event) {\n\n            event.preventDefault(); // Previene el comportamiento por defecto del botón\n\n            // Llama a la función de validación\n            if (!validateForm()) {\n                // Si la validación falla, no procede\n                return;\n            }\n\n            // Capture the returned dictionaries from handleFormSubmit\n            const {dictNewData } = handleFormSubmit();\n\n            \n            // Call the createUser function with the dictionaries\n            createUser(dictNewData);\n        });\n\n    } else {\n        setTimeout(checkForfinishButton,\n            1000); // Retry after 1 second if not found\n    }\n}\n\n\n\n// Function to create a new user\nfunction createUser(dictNewData) {\n\n    const fullName = dictNewData[\"name\"] + \" \" + dictNewData[\"lastName\"];\n    const fullphone = dictNewData[\"country_code\"]+ dictNewData[\"number\"];\n\n    \n    const data = {\n      \"title\": fullName,\n      \"email\":dictNewData[\"mail\"],\n      \"firstName\": dictNewData[\"name\"],\n      \"lastName\": dictNewData[\"lastName\"],\n      \"phone\": fullphone,\n    };\n    // Define the API endpoint\n    // const apiUrl = \"your API url with endpoint.\";\n\n    // Define headers (include API key if required)\n    const headers = {\n      \"Content-Type\": \"application/json\",\n        \"x-api-key\": \"your API token\"\n    };\n\n    showLoadingSpinner();\n      fetch(apiUrl, {\n        method: 'POST', // Specify the HTTP method\n        headers: headers, // Include the headers\n        body: JSON.stringify(data) // Convert data to JSON string\n      })\n      .then(response => {\n        // Clone the response to allow logging without disturbing the original response\n        const responseClone = response.clone();\n        return response.json(); // Parse the JSON response\n\n      })\n      .then(parsedResponse => {\n        // Pass the parsed JSON to errorCodeParser\n         hideLoadingSpinner();\n        const [statusCode, messageOrEmail] = errorCodeParser(parsedResponse);\n    \n        if (statusCode === 200 || statusCode === 201) {\n          // Success: Handle the successful response data\n          clearError()\n          displaySuccess();\n          blockFinish()\n        } else if (statusCode === 500) {\n          // Server Error: Display the error div with the message\n          displayError(`${messageOrEmail}`);\n        } else {\n          // Other Failures: Handle other error messages\n          console.error(`Undefined error ${messageOrEmail}`);\n          alert(`${messageOrEmail}`);\n        }\n      })\n      .catch(error => {\n        // Handle any errors that occurred during the fetch or in the above .then() blocks\n        console.error(\"An error occurred:\", error);\n        alert(`An error occurred: ${error.message}`);\n      });\n    }\n\nfunction errorCodeParser(parsedResponse) {\n  try {\n    const jsonResponse = parsedResponse.statusCode;\n    const jsonBody = parsedResponse.body;\n\n    let errorMessage;\n\n    try {\n      // Attempt to extract \"message\" using a regex pattern\n      const pattern = /'message':\\s*\"([^\"]*)\"/;\n      const match = pattern.exec(jsonBody);\n      if (match && match[1]) {\n        errorMessage = match[1];\n      } else {\n        throw new Error(\"Message pattern not found\");\n      }\n    } catch (regexError) {\n      // If regex fails, attempt to parse the body as JSON after replacing single quotes\n      try {\n        const sJson = jsonBody.replace(/'/g, '\"'); // Replace all single quotes with double quotes\n        const data = JSON.parse(sJson);\n        errorMessage = data.message;\n      } catch (jsonError) {\n        console.error(\"Error parsing JSON body:\", jsonError);\n        errorMessage = null;\n      }\n    }\n\n    if (errorMessage) {\n      return [jsonResponse, errorMessage];\n    } else {\n      // If no error message found, attempt to extract \"email\"\n      const bodyParsed = JSON.parse(jsonBody);\n      const nameResponse = bodyParsed.email;\n      return [jsonResponse, nameResponse];\n    }\n  } catch (error) {\n    console.error(\"Error in errorCodeParser:\", error);\n    return [null, null];\n  }\n}\n\n\nfunction displayError(message) {\n  const errorDiv = document.getElementById('errorDiv');\n  if (errorDiv) {\n    errorDiv.textContent = message; // Set the error message text\n    errorDiv.style.display = 'block'; // Make the div visible\n  } else {\n    console.error(\"Error Div not found in the DOM.\");\n  }\n}\n\nfunction clearError() {\n  const errorDiv = document.getElementById('errorDiv');\n  if (errorDiv) {\n    errorDiv.style.display = 'none'; // Make the div visible\n  } else {\n    console.error(\"Error Div not found in the DOM.\");\n  }\n}\n\nfunction displaySuccess() {\n  const errorDiv = document.getElementById('successDiv');\n  if (errorDiv) {\n    errorDiv.style.display = 'block'; // Make the div visible\n  } else {\n    console.error(\"Error Div not found in the DOM.\");\n  }\n}\n\nfunction blockFinish() {\n    var submitButton = document.getElementById(\n            'Save-button');\n    // Add the 'blocked' class to disable the button\n    if (submitButton) {\n        submitButton.classList.add('blocked'); // Apply the .blocked CSS class\n    } else {\n        console.error(\"Save button not found in the DOM.\");\n    }\n}\n\nfunction showLoadingSpinner() {\n    const spinner = document.getElementById('spinner');\n    spinner.style.display = 'inline-block'; // Show spinner\n}\n\nfunction hideLoadingSpinner() {\n    const spinner = document.getElementById('spinner');\n    spinner.style.display = 'none'; // Hide spinner\n}\n\n\ncheckForfinishButton();\ncheckForCountryButton();\n\n\n\n\nlet card_form_header =\n    '<div class=\"form-header\">' +\n        '<div class=\"title-container\">' +\n            '<div class=\"button-text\">'+ \n                'Create account' + \n            '</div>' +\n        '</div>' +\n    '</div>';\n\nlet card_Full_name =\n    '<div class=\"input-container-two-columns\">' +\n        '<div class=\"input-element\">' +\n            '<label for=\"contact-name\">First name</label>' +\n            '<input type=\"text\" id=\"contact-name\" name=\"first-name-input\" placeholder=\"your first name\"  class=\"input-field\" required>' +\n                //'<span class=\"error-message\" id=\"contact-name-error\"></span>' +\n\n        '</div>' +\n        '<div class=\"input-element\">' +\n            '<label for=\"contact-last-name\">Last name</label>' +\n            '<input type=\"text\" id=\"contact-last-name\"  name=\"last-name-input\" placeholder=\"your last name\" class=\"input-field\" required>' +\n            //'<span class=\"error-message\" id=\"contact-last-name-error\"></span>' +\n        '</div>' +\n    '</div>';\n\n\nlet card_email =\n    '<div class=\"input-container\">' +\n        '<label for=\"email\">Email</label>' +\n        '<input type=\"email\" id=\"email\" placeholder=\"your@gmail.com\" name=\"email-input\" class=\"input-field\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" required>' +\n            //'<span class=\"error-message\" id=\"email-error\"></span>' +\n    '</div>';\n\n\nlet card_form_phone = \n    '<div class=\"input-container\">' +\n        '<label for=\"phone-number\">Phone</label>' +\n        '<div class=\"phone-input-container\">' +\n            '<div class=\"country-code-container\">' +\n                '<label for=\"country-code\" class=\"sr-only\">Country Code</label>' +\n                '<select id=\"country-code\" class=\"country-select\" name=\"country-code\" required>' +\n                    '<option value=\"\" disabled selected>Country code</option>' +\n                    '<option value=\"+1\" data-country=\"us\">🇺🇸 +1</option>' +\n                    '<option value=\"+52\" data-country=\"mx\">🇲🇽 +52</option>' +\n                    '<option value=\"+7\" data-country=\"ru\">🇷🇺 +7</option>' +\n                    '<option value=\"+20\" data-country=\"eg\">🇪🇬 +20</option>' +\n                    '<option value=\"+27\" data-country=\"za\">🇿🇦 +27</option>' +\n                    '<option value=\"+30\" data-country=\"gr\">🇬🇷 +30</option>' +\n                    '<option value=\"+31\" data-country=\"nl\">🇳🇱 +31</option>' +\n                    '<option value=\"+32\" data-country=\"be\">🇧🇪 +32</option>' +\n                    '<option value=\"+81\" data-country=\"jp\">🇯🇵 +81</option>' +\n                    '<option value=\"+33\" data-country=\"fr\">🇫🇷 +33</option>' +\n                    '<option value=\"+34\" data-country=\"es\">🇪🇸 +34</option>' +\n                    '<option value=\"+36\" data-country=\"hu\">🇭🇺 +36</option>' +\n                    '<option value=\"+39\" data-country=\"it\">🇮🇹 +39</option>' +\n                    '<option value=\"+40\" data-country=\"ro\">🇷🇴 +40</option>' +\n                    '<option value=\"+41\" data-country=\"ch\">🇨🇭 +41</option>' +\n                    '<option value=\"+43\" data-country=\"at\">🇦🇹 +43</option>' +\n                    '<option value=\"+44\" data-country=\"gb\">🇬🇧 +44</option>' +\n                    '<option value=\"+45\" data-country=\"dk\">🇩🇰 +45</option>' +\n                    '<option value=\"+46\" data-country=\"se\">🇸🇪 +46</option>' +\n                    '<option value=\"+47\" data-country=\"no\">🇳🇴 +47</option>' +\n                    '<option value=\"+48\" data-country=\"pl\">🇵🇱 +48</option>' +\n                    '<option value=\"+49\" data-country=\"de\">🇩🇪 +49</option>' +\n                    '<option value=\"+53\" data-country=\"cu\">🇨🇺 +53</option>' +\n                    '<option value=\"+54\" data-country=\"ar\">🇦🇷 +54</option>' +\n                    '<option value=\"+55\" data-country=\"br\">🇧🇷 +55</option>' +\n                    '<option value=\"+56\" data-country=\"cl\">🇨🇱 +56</option>' +\n                    '<option value=\"+57\" data-country=\"co\">🇨🇴 +57</option>' +\n                    '<option value=\"+58\" data-country=\"ve\">🇻🇪 +58</option>' +\n                    '<option value=\"+59\" data-country=\"sr\">🇸🇷 +59</option>' +\n                    '<option value=\"+61\" data-country=\"au\">🇦🇺 +61</option>' +\n                    '<option value=\"+64\" data-country=\"nz\">🇳🇿 +64</option>' +\n                    '<option value=\"+351\" data-country=\"pt\">🇵🇹 +351</option>' +\n                    '<option value=\"+352\" data-country=\"lu\">🇱🇺 +352</option>' +\n                    '<option value=\"+353\" data-country=\"ie\">🇮🇪 +353</option>' +\n                    '<option value=\"+354\" data-country=\"is\">🇮🇸 +354</option>' +\n                    '<option value=\"+355\" data-country=\"al\">🇦🇱 +355</option>' +\n                    '<option value=\"+356\" data-country=\"mt\">🇲🇹 +356</option>' +\n                    '<option value=\"+358\" data-country=\"fi\">🇫🇮 +358</option>' +\n                    '<option value=\"+359\" data-country=\"bg\">🇧🇬 +359</option>' +\n                    '<option value=\"+372\" data-country=\"ee\">🇪🇪 +372</option>' +\n                    '<option value=\"+373\" data-country=\"md\">🇲🇩 +373</option>' +\n                    '<option value=\"+375\" data-country=\"by\">🇧🇾 +375</option>' +\n                    '<option value=\"+376\" data-country=\"ad\">🇦🇩 +376</option>' +\n                    '<option value=\"+377\" data-country=\"mc\">🇲🇨 +377</option>' +\n                    '<option value=\"+378\" data-country=\"sm\">🇸🇲 +378</option>' +\n                    '<option value=\"+380\" data-country=\"ua\">🇺🇦 +380</option>' +\n                    '<option value=\"+381\" data-country=\"rs\">🇷🇸 +381</option>' +\n                    '<option value=\"+385\" data-country=\"hr\">🇭🇷 +385</option>' +\n                    '<option value=\"+386\" data-country=\"si\">🇸🇮 +386</option>' +\n                    '<option value=\"+387\" data-country=\"ba\">🇧🇦 +387</option>' +\n                    '<option value=\"+389\" data-country=\"mk\">🇲🇰 +389</option>' +\n                    '<option value=\"+420\" data-country=\"cz\">🇨🇿 +420</option>' +\n                    '<option value=\"+421\" data-country=\"sk\">🇸🇰 +421</option>' +\n                    '<option value=\"+423\" data-country=\"li\">🇱🇮 +423</option>' +\n                    '<option value=\"+500\" data-country=\"fk\">🇫🇰 +500</option>' +\n                    '<option value=\"+501\" data-country=\"bz\">🇧🇿 +501</option>' +\n                    '<option value=\"+502\" data-country=\"gt\">🇬🇹 +502</option>' +\n                    '<option value=\"+503\" data-country=\"sv\">🇸🇻 +503</option>' +\n                    '<option value=\"+504\" data-country=\"hn\">🇭🇳 +504</option>' +\n                    '<option value=\"+505\" data-country=\"ni\">🇳🇮 +505</option>' +\n                    '<option value=\"+506\" data-country=\"cr\">🇨🇷 +506</option>' +\n                    '<option value=\"+507\" data-country=\"pa\">🇵🇦 +507</option>' +\n                    '<option value=\"+508\" data-country=\"pm\">🇵🇲 +508</option>' +\n                    '<option value=\"+509\" data-country=\"ht\">🇭🇹 +509</option>' +\n                    '<option value=\"+590\" data-country=\"gp\">🇬🇵 +590</option>' +\n                    '<option value=\"+591\" data-country=\"bo\">🇧🇴 +591</option>' +\n                    '<option value=\"+592\" data-country=\"gy\">🇬🇾 +592</option>' +\n                    '<option value=\"+593\" data-country=\"ec\">🇪🇨 +593</option>' +\n                    '<option value=\"+594\" data-country=\"gf\">🇬🇫 +594</option>' +\n                    '<option value=\"+595\" data-country=\"py\">🇵🇾 +595</option>' +\n                    '<option value=\"+596\" data-country=\"mq\">🇲🇶 +596</option>' +\n                    '<option value=\"+597\" data-country=\"sr\">🇸🇷 +597</option>' +\n                    '<option value=\"+598\" data-country=\"uy\">🇺🇾 +598</option>' +\n                    '<option value=\"+599\" data-country=\"bq\">🇧🇶 +599</option>' +\n                    '<option value=\"+672\" data-country=\"aq\">🇦🇶 +672</option>' +\n                    '<option value=\"+674\" data-country=\"nr\">🇳🇷 +674</option>' +\n                    '<option value=\"+675\" data-country=\"pg\">🇵🇬 +675</option>' +\n                    '<option value=\"+676\" data-country=\"to\">🇹🇴 +676</option>' +\n                    '<option value=\"+677\" data-country=\"sb\">🇸🇧 +677</option>' +\n                    '<option value=\"+678\" data-country=\"vu\">🇻🇺 +678</option>' +\n                    '<option value=\"+679\" data-country=\"fj\">🇫🇯 +679</option>' +\n                    '<option value=\"+680\" data-country=\"pw\">🇵🇼 +680</option>' +\n                    '<option value=\"+681\" data-country=\"wf\">🇼🇫 +681</option>' +\n                    '<option value=\"+682\" data-country=\"ck\">🇨🇰 +682</option>' +\n                    '<option value=\"+683\" data-country=\"nu\">🇳🇺 +683</option>' +\n                    '<option value=\"+685\" data-country=\"ws\">🇼🇸 +685</option>' +\n                    '<option value=\"+686\" data-country=\"ki\">🇰🇮 +686</option>' +\n                    '<option value=\"+687\" data-country=\"nc\">🇳🇨 +687</option>' +\n                    '<option value=\"+688\" data-country=\"tv\">🇹🇻 +688</option>' +\n                    '<option value=\"+689\" data-country=\"pf\">🇵🇫 +689</option>' +\n                    '<option value=\"+690\" data-country=\"tk\">🇹🇰 +690</option>' +\n                    '<option value=\"+691\" data-country=\"fm\">🇫🇲 +691</option>' +\n                    '<option value=\"+692\" data-country=\"mh\">🇲🇭 +692</option>' +\n                '</select>' +\n            '</div>' +\n            '<div class=\"phone-number-container\">' +\n                '<input type=\"tel\" id=\"phone-number\" name=\"phone-input\" class=\"phone-number-input\" placeholder=\"XXX-XXX-XXXX\" maxlength=\"12\" required>' +\n            '</div>' +\n        '</div>' +\n            '<p class=\"description-small\">We will use your phone only for foaling alerts.</p>' +\n    '</div>';\n\n\nlet finishButton = \n    '<div id=\"errorDiv\"></div>' +\n        '<div id=\"successDiv\">Account created. Check your inbox email inbox to finish. <br> You can close this window.</div>' +            \n        '<button class=\"save-btn\" id=\"Save-button\">' +\n            'Create account' +\n            '<span id=\"spinner\" class=\"spinner\" style=\"display:none;\"></span>' +\n        '</button>' + \n    '</div>' ;\n\nlet javascriptDashboard = \n'<tb-dashboard-state [ctx]=\"ctx\" [syncParentStateParams]=\"true\" stateId=\"javascript\" class=\"javascriptdashboard\"></tb-dashboard-state>';\n\nlet contactFormHTML =\n    '<div class=\"mainContainer\">' +\n        '<div class=\"logo\">' +\n            // toFill you can add your logo here\n            '<img src=\"https://acte.ltd/_ipx/f_webp,w_800,q_80/https://cms.acte.ltd/storage/app/uploads/public/626/f7d/3e4/626f7d3e40b37580942180.png\" alt=\"Ranch Radar Logo\">' +\n        '</div>' +\n        '<div class=\"formContainer\">' +\n            card_form_header +\n        \n            '<form action=\"/submit-form\" method=\"POST\" class=\"inputsContainer\">' +\n            \n                    // <!-- Description -->\n                    '<p class=\"description\">Fill your contact to receive alarms by phone call and mail.</p>' +\n                \n                    // <!-- Contact Name -->\n                \n                    card_Full_name +\n                \n                    // <!-- Phone Number -->\n                \n                    card_form_phone +\n                \n                    // <!-- Email -->\n                \n                    card_email +\n            \n            '</form>' + \n\n        finishButton + \n    '</div>';\n\n\n\nreturn '<title>RanchRadar</title>' +  javascriptDashboard +  contactFormHTML;\n",
        "applyDefaultMarkdownStyle": true,
        "markdownCss": "\n.javascriptdashboard{\n    display: none;\n}\n\nstrong {\n    font-weight: 600; /* This removes the bold effect */\n}\n\n#errorDiv {\n  display: none; /* Hidden by default */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #EB8A7B;\n  background-color: #EB8A7B;\n  color: white;\n  border-radius: 4px;\n}\n\n#successDiv{\n  display: none; /* Hidden by default */\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #7AA382;\n  background-color: #7AA382;\n  color: white;\n  border-radius: 4px;\n}\n\n/* Styling for the Finish button */\n#finishBtn {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.logo {\n    position: absolute;        /* Removes the logo from the normal flow */\n    top: 20px;                 /* Positions the logo 20px from the top */\n    left: 50%;                 /* Positions the logo at 50% from the left */\n    transform: translateX(-50%); /* Centers the logo horizontally */\n    display: block;\n}\n\n/* Spinner styles */\n.spinner {\n    border: 4px solid #B69B72; /* Light gray */\n    border-top: 4px solid #F6F8F1; /* Blue */\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    animation: spin 1s linear infinite;\n    display: inline-block;\n    margin-left: 10px;\n}\n\n/* Keyframes for spinner animation */\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.invalid {\n    border-bottom: 2px solid #EB8A7B!important;\n    \n    \n}\n\n/* Estilo para mensajes de error */\n.error-message {\n    color: red;\n    font-size: 12px;\n    margin-top: 5px;\n    display: block; /* Oculto por defecto */\n}\n\n.error-message.active {\n    display: block;\n}\n\n\n\n.logo img {\n    height: 60px;              /* Adjust the height as needed */\n    width: auto;               /* Maintains aspect ratio */\n}\n\n.blocked {\n    pointer-events: none;    /* Disable all mouse interactions */\n    opacity: 0.5;            /* Make the button appear semi-transparent */\n    cursor: not-allowed;     /* Change the cursor to indicate it's not clickable */\n    background-color: #ccc;  /* Optional: Change background color to gray */\n    color: #666;             /* Optional: Change text color to dark gray */\n    border: none;            /* Optional: Remove border if desired */\n}\n/* styles.css */\n\n/* Estilo para etiquetas solo para lectores de pantalla */\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap; /* Evita el salto de línea */\n    border: 0;\n}\n\n\n.mainContainer{\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background-color: #EEEEEE;\n  font-family: Arial, sans-serif;\n  margin: 0;\n  justify-content: center;\n  align-items: center; /* Changed from align-content to align-items */\n  position:relative;\n}\n\n\n\n.formContainer {\n    width: 60%;\n    height: 60%;\n    padding: 20px;    /* Optional: add some padding for better aesthetics */\n    background-color: #405344; \n    border-radius: 10px;\n    font-family: Arial, sans-serif;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Optional: add shadow for depth */\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    \n}\n\n\n\n\n.container {\n  height: 100%;\n  display: flex;       /* Use flexbox to allow flex child elements */\n  align-items: center; /* Vertically centers the card */\n  justify-content: center; /* Horizontally centers the card */\n  padding: 20px;\n  background-color: #f0f0f0; /* Just to visualize the container */\n}\n\n.inputsContainer{\n       width: 100%;\n    height: 100%;\n    padding: 0;    /* Optional: add some padding for better aesthetics */\n    background-color: #405344; /* Optional: differentiate from parent */\n    border-radius: 0;\n    font-family: Arial, sans-serif;\n    display: flex;\n    flex-direction: column; \n    justify-content: space-around;\n}\n\n\n.form-header {\n    display: flex;\n    flex-direction: column;\n}\n\n\n/* Title Container */\n.title-container {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.title-icon {\n    width: auto;\n    height: 25px;\n    margin-right: 10px;\n}\n\n.button-text {\n    margin-right: auto;\n    margin-left: 0px;\n    font-size: 1.5rem;\n    font-family: sans-serif;\n    font-weight: 500;\n    -webkit-transition: all 0.3s ease;\n    -o-transition: all 0.3s ease;\n    transition: all 0.3s ease;\n    color: #F6F8F1; /* Default color */\n    padding: 0px;\n}\n\n.header-line {\n    border: 0;\n    height: 1px;\n    background-color: #ddd;\n    margin: 10px 0;\n}\n\n\n\n\n.description {\n  font-size: 0.9rem;\n  color: #F6F8F1;\n  margin-bottom: 15px;\n}\n\n.description-small {\n  font-size: 0.8rem;\n  color: #F6F8F1;\n  margin-top: 5px;\n}\n\nlabel {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.input-field {\n    font-size: 0.8rem;\n    border: none;\n    outline: none;    \n    width: 100%;\n    padding: 10px;\n    margin-bottom: 15px;\n    border-bottom: 1px solid #666;\n    border-radius: 0px;\n    background-color: transparent!important;\n    color: #F6F8F1;\n}\n\n\n\n.country-code-label {\n    color: #F6F8F1 ;\n    font-size: 1.1rem;\n    white-space: nowrap; \n}\n\n.alert-info, .important-notice {\n  font-size: 1.1rem;\n  color: #F6F8F1;\n  margin-bottom: 15px;\n}\n\n.save-btn {\n  width: 60%;\n  padding: 10px;\n  background-color: #B69B72;\n  color: #F6F8F1;\n  border: none;\n  border-radius: 5px;\n  font-weight: bold;\n  cursor: pointer;\n  align-self: flex-end;\n}\n\n.input-container{\n    padding: 0;\n    margin: 0;\n    font-size: 1rem;\n    color: #FDFFFA;\n}\n\n.input-container-two-columns{\n    gap: 15px;\n    white-space: nowrap;\n    padding: 0;\n    margin: 0;\n    font-size: 1rem;\n    display: flex;\n    flex-direction: row;\n}\n\n\n\n/* Ensure the container takes up the full width */\n.phone-input-container {\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    gap: 10px; /* Space between the two boxes */\n    width: 100%; /* Take up 100% of the width */\n    box-sizing: border-box; /* Ensure padding/border are included in the width */\n}\n\n/* Country code container should not expand, only take as much space as needed */\n.country-code-container {\n    flex-shrink: 0; /* Prevent shrinking */\n    background-color:  transparent!important;\n    border: 1px solid #666;\n    outline: none;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    height: 40px; /* Fixed height to match the phone number input */\n    padding-left: 10px;\n    padding-right: 10px;\n}\n\n/* Phone number container should expand to fill the remaining space */\n.phone-number-container {\n    flex-grow: 1; \n    background-color: #405344;\n    border-bottom: 1px solid #666;\n    border-radius: 0px;\n    display: flex;\n    align-items: center;\n    width: 100%; /* Ensures it fills the remaining width */\n    height: 40px; /* Match the height of the country code dropdown */\n    padding-left: 10px;\n}\n\n.country-select {\n    appearance: none;\n    background-color: transparent;\n    border: none;\n    font-size: 1rem;\n    cursor: pointer;\n    color: #F6F8F1;\n    height: 100%; /* Ensure the dropdown spans the full height */\n    padding-left: 5px; /* Add padding to the left to make space for the flag */\n    padding-right: 25px; /* Add padding to the right to make space for the arrow */\n    box-sizing: border-box;\n    position: relative;\n    outline: none; /* Remove the default outline */\n}\n\n/* Use a custom PNG for the arrow */\n.country-select {\n    background-image: url('https://foalradar.s3.us-east-2.amazonaws.com/thingsboard/svgs/arrow-down-w.png'); /* Replace with your PNG path */\n    background-repeat: no-repeat;\n    background-position: right 0px center; /* Adjust positioning */\n    background-size: 14px 14px; /* Adjust size to fit nicely */\n}\n\n/* Flags are emojis from the dropdown list */\n.country-select option {\n    background: #30362F;\n    color: #F6F8F1;\n    padding: 5px;\n}\n\n/* Add custom focus outline to match the size of the dropdown */\n.country-select:focus {\n    outline: 0px solid #FFB347; /* Yellow or any custom color */\n    outline-offset: 0; /* Make sure the outline is aligned with the element */\n    border-radius: 5px; /* Match the border radius of the dropdown */\n}\n\n/* Styling for phone number input */\n.phone-number-input {\n    width: 100%;\n    border: none;\n    outline: none;\n    background-color: transparent!important;\n    font-size: 0.8rem;\n    padding-left: 5px;\n    height: 100%; /* Ensure the input spans the full height */\n    box-sizing: border-box; /* Ensure padding is included in height */\n    color:#fff!important;\n}\n\n.input-element{\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    color:  #FDFFFA;\n}\n\n"
      },
      "title": "Markdown/HTML Card",
      "showTitleIcon": false,
      "iconColor": "rgba(0, 0, 0, 0.87)",
      "iconSize": "24px",
      "titleTooltip": "",
      "dropShadow": false,
      "enableFullscreen": false,
      "widgetStyle": null,
      "titleStyle": {
        "fontSize": "16px",
        "fontWeight": 400
      },
      "showLegend": false,
      "useDashboardTimewindow": true,
      "displayTimewindow": true,
      "margin": "0px",
      "borderRadius": "0px",
      "widgetCss": "",
      "pageSize": 1024,
      "noDataDisplayMessage": "",
      "units": null
    },
    "row": 0,
    "col": 0,
    "id": "7930f084-b5c5-de99-398a-e8c64d79a899"
  },
  "aliasesInfo": {
    "datasourceAliases": {},
    "targetDeviceAliases": {}
  },
  "filtersInfo": {
    "datasourceFilters": {}
  },
  "originalSize": {
    "sizeX": 24,
    "sizeY": 19
  },
  "originalColumns": 24
}